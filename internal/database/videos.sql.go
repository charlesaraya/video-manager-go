// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: videos.sql

package database

import (
	"context"
)

const createVideo = `-- name: CreateVideo :one
INSERT INTO videos(id, created_at, updated_at, title, description, user_id)
VALUES (
    ?,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP,
    ?,
    ?,
    ?
) RETURNING id, created_at, updated_at, thumbnail_url, video_url, title, description, user_id
`

type CreateVideoParams struct {
	ID          string `json:"id"`
	Title       string `json:"title"`
	Description string `json:"description"`
	UserID      string `json:"user_id"`
}

func (q *Queries) CreateVideo(ctx context.Context, arg CreateVideoParams) (Video, error) {
	row := q.db.QueryRowContext(ctx, createVideo,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.UserID,
	)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ThumbnailUrl,
		&i.VideoUrl,
		&i.Title,
		&i.Description,
		&i.UserID,
	)
	return i, err
}

const deleteAllVideos = `-- name: DeleteAllVideos :exec
DELETE FROM videos
`

func (q *Queries) DeleteAllVideos(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllVideos)
	return err
}

const deleteVideo = `-- name: DeleteVideo :exec
;

DELETE FROM videos 
WHERE id = ? AND user_id = ?
`

type DeleteVideoParams struct {
	ID     string `json:"id"`
	UserID string `json:"user_id"`
}

func (q *Queries) DeleteVideo(ctx context.Context, arg DeleteVideoParams) error {
	_, err := q.db.ExecContext(ctx, deleteVideo, arg.ID, arg.UserID)
	return err
}

const getVideo = `-- name: GetVideo :one
SELECT id, created_at, updated_at, thumbnail_url, video_url, title, description, user_id FROM videos WHERE id = ?
`

func (q *Queries) GetVideo(ctx context.Context, id string) (Video, error) {
	row := q.db.QueryRowContext(ctx, getVideo, id)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ThumbnailUrl,
		&i.VideoUrl,
		&i.Title,
		&i.Description,
		&i.UserID,
	)
	return i, err
}

const getVideosByUser = `-- name: GetVideosByUser :many
SELECT id, created_at, updated_at, thumbnail_url, video_url, title, description, user_id FROM videos WHERE user_id = ?
`

func (q *Queries) GetVideosByUser(ctx context.Context, userID string) ([]Video, error) {
	rows, err := q.db.QueryContext(ctx, getVideosByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Video
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ThumbnailUrl,
			&i.VideoUrl,
			&i.Title,
			&i.Description,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVideoThumbnail = `-- name: UpdateVideoThumbnail :one
UPDATE videos
SET thumbnail_url = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, created_at, updated_at, thumbnail_url, video_url, title, description, user_id
`

type UpdateVideoThumbnailParams struct {
	ThumbnailUrl string `json:"thumbnail_url"`
	ID           string `json:"id"`
}

func (q *Queries) UpdateVideoThumbnail(ctx context.Context, arg UpdateVideoThumbnailParams) (Video, error) {
	row := q.db.QueryRowContext(ctx, updateVideoThumbnail, arg.ThumbnailUrl, arg.ID)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ThumbnailUrl,
		&i.VideoUrl,
		&i.Title,
		&i.Description,
		&i.UserID,
	)
	return i, err
}

const updateVideoUrl = `-- name: UpdateVideoUrl :one
;

UPDATE videos
SET video_url = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, created_at, updated_at, thumbnail_url, video_url, title, description, user_id
`

type UpdateVideoUrlParams struct {
	VideoUrl string `json:"video_url"`
	ID       string `json:"id"`
}

func (q *Queries) UpdateVideoUrl(ctx context.Context, arg UpdateVideoUrlParams) (Video, error) {
	row := q.db.QueryRowContext(ctx, updateVideoUrl, arg.VideoUrl, arg.ID)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ThumbnailUrl,
		&i.VideoUrl,
		&i.Title,
		&i.Description,
		&i.UserID,
	)
	return i, err
}
